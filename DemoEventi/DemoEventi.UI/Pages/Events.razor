@page "/events"
@using DemoEventi.Application.Interfaces
@using DemoEventi.Application.DTOs
@using DemoEventi.Application.Common
@inject IEventService EventService
@inject NavigationManager Navigation

<PageTitle>Events - DemoEventi</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Events</h1>
                <button class="btn btn-primary" @onclick="CreateNewEvent">
                    <span class="oi oi-plus"></span> Create Event
                </button>
            </div>

            @if (events == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!events.Any())
            {
                <div class="alert alert-info">
                    No events found. <a href="eventform" class="alert-link">Create the first event</a>.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Name</th>
                                <th>Location</th>
                                <th>Start Date</th>
                                <th>Participants</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var evt in events)
                            {
                                <tr>
                                    <td>@evt.Name</td>
                                    <td>@evt.Location</td>
                                    <td>@evt.StartDate.ToString("MMM dd, yyyy HH:mm")</td>
                                    <td>
                                        @if (evt.ParticipantIds?.Any() == true)
                                        {
                                            <span class="badge bg-success me-1">@evt.ParticipantIds.Count() participants</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No participants</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditEvent(evt.Id)">
                                            <span class="oi oi-pencil"></span> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-info me-2" @onclick="() => ManageParticipants(evt.Id)">
                                            <span class="oi oi-people"></span> Participants
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEvent(evt.Id)">
                                            <span class="oi oi-trash"></span> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<EventDto>? events;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var result = await EventService.GetAllAsync();
            if (result.IsSuccess)
            {
                events = result.Value;
            }
            else
            {
                // In a real app, you'd want proper error handling
                Console.WriteLine($"Error loading events: {result.Error}");
                events = new List<EventDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
            events = new List<EventDto>();
        }
    }

    private void CreateNewEvent()
    {
        Navigation.NavigateTo("eventform");
    }

    private void EditEvent(Guid eventId)
    {
        Navigation.NavigateTo($"eventform/{eventId}");
    }

    private void ManageParticipants(Guid eventId)
    {
        Navigation.NavigateTo($"eventform/{eventId}#participants");
    }

    private async Task DeleteEvent(Guid eventId)
    {
        try
        {
            var result = await EventService.DeleteAsync(eventId);
            if (result.IsSuccess)
            {
                await LoadEvents();
            }
            else
            {
                // In a real app, you'd want proper error handling
                Console.WriteLine($"Error deleting event: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }
}
