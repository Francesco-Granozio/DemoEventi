@page "/eventform"
@page "/eventform/{EventId:guid}"
@using DemoEventi.Application.Interfaces
@using DemoEventi.Application.DTOs
@using DemoEventi.Application.Common
@using DemoEventi.Domain.Entities
@using System.ComponentModel.DataAnnotations
@inject IEventService EventService
@inject IUserService UserService
@inject NavigationManager Navigation

<PageTitle>@(isEdit ? "Edit" : "Create") Event - DemoEventi</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h2>@(isEdit ? "Edit" : "Create") Event</h2>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@eventModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Event Name</label>
                            <InputText id="name" class="form-control" 
                                     @bind-value="eventModel.Name" />
                            <ValidationMessage For="@(() => eventModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="location" class="form-label">Location</label>
                            <InputText id="location" class="form-control" 
                                     @bind-value="eventModel.Location" />
                            <ValidationMessage For="@(() => eventModel.Location)" />
                        </div>

                        @* <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date & Time</label>
                            <InputDateTime id="startDate" class="form-control" 
                                         @bind-value="eventModel.StartDate" />
                            <ValidationMessage For="@(() => eventModel.StartDate)" />
                        </div> *@

                        <div class="mb-3">
                            <label class="form-label">Participants</label>
                            <div class="row">
                                @if (availableUsers != null)
                                {
                                    @foreach (var user in availableUsers)
                                    {
                                        <div class="col-md-6 mb-2">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" 
                                                       id="user-@user.Id" 
                                                       checked="@IsUserSelected(user.Id)"
                                                       @onchange="@(e => ToggleUser(user.Id, e.Value))" />
                                                <label class="form-check-label" for="user-@user.Id">
                                                    @user.FirstName @user.LastName
                                                </label>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-12">
                                        <div class="spinner-border spinner-border-sm" role="status">
                                            <span class="visually-hidden">Loading users...</span>
                                        </div>
                                    </div>
                                }
                            </div>
                            @if (availableUsers?.Any() != true)
                            {
                                <div class="alert alert-warning">
                                    No users available. <a href="users" class="alert-link">Create some users first</a>.
                                </div>
                            }
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                @(isEdit ? "Update" : "Create") Event
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? EventId { get; set; }

    private bool isEdit => EventId.HasValue;
    private bool isSubmitting = false;
    private string? errorMessage;
    private IEnumerable<UserDto>? availableUsers;
    private EventFormModel eventModel = new();
    private HashSet<Guid> selectedUserIds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        
        if (isEdit)
        {
            await LoadEvent();
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            var result = await UserService.GetAllAsync();
            if (result.IsSuccess)
            {
                availableUsers = result.Value;
            }
            else
            {
                errorMessage = result.Error;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
        }
    }

    private async Task LoadEvent()
    {
        try
        {
            var result = await EventService.GetByIdAsync(EventId.Value);
            if (result.IsSuccess)
            {
                var evt = result.Value;
                eventModel = new EventFormModel
                {
                    Name = evt.Name,
                    Location = evt.Location,
                    StartDate = evt.StartDate
                };
                selectedUserIds = evt.ParticipantIds?.ToHashSet() ?? new HashSet<Guid>();
            }
            else
            {
                errorMessage = result.Error;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading event: {ex.Message}";
        }
    }

    private bool IsUserSelected(Guid userId)
    {
        return selectedUserIds.Contains(userId);
    }

    private void ToggleUser(Guid userId, object? isChecked)
    {
        if (isChecked is bool checkedValue)
        {
            if (checkedValue)
                selectedUserIds.Add(userId);
            else
                selectedUserIds.Remove(userId);
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = null;
        
        try
        {
            var createEventDto = new CreateEventDto
            {
                Name = eventModel.Name,
                Location = eventModel.Location,
                StartDate = eventModel.StartDate,
                ParticipantIds = selectedUserIds
            };

            Result<EventDto> result;
            if (isEdit)
            {
                result = await EventService.UpdateAsync(EventId.Value, createEventDto);
            }
            else
            {
                result = await EventService.CreateAsync(createEventDto);
            }

            if (result.IsSuccess)
            {
                Navigation.NavigateTo("events");
            }
            else
            {
                if (result.ValidationErrors.Any())
                {
                    errorMessage = string.Join(", ", result.ValidationErrors);
                }
                else
                {
                    errorMessage = result.Error;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving event: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("events");
    }

    public class EventFormModel
    {
        [Required(ErrorMessage = "Event name is required")]
        [StringLength(100, ErrorMessage = "Event name cannot exceed 100 characters")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Location is required")]
        [StringLength(200, ErrorMessage = "Location cannot exceed 200 characters")]
        public string Location { get; set; } = "";

        [Required(ErrorMessage = "Start date is required")]
        [DataType(DataType.DateTime)]
        public DateTime StartDate { get; set; } = DateTime.Now.AddDays(1);
    }
}
